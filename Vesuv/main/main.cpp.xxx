#include "main.h"
#include "../servers/displayServer.h"
#include "mainTimerSync.h"

using namespace Vesuv::Scene::Main;
using namespace Vesuv::Core::OS;


namespace Vesuv::Main {

  // Initialized in setup()


  // Initialized in setup2()
  static DisplayServer* displayServer;


  // Initialized in start()
  // Everything the main loop needs to know about frame timings
  static MainTimerSync mainTimerSync;


  // Drivers


  // Engine config/tools
  static bool editor = false;
  static bool project_manager = false;


  // Display
  static DisplayServer::WindowMode windowMode = DisplayServer::WindowMode::WINDOWED;
  static DisplayServer::WindowFlags windowFlags = DisplayServer::WindowFlags::NO_FLAG;


  /* Engine initialization
   *
   * Consists of several methods that are called by each platform's specific main function.
   *
   * setup is responsible for the initialization of all low level singletons and core types,
   * parsing the command line arguments to configure things accordingly.
   */
  Error Main::setup() {
    OS::getSingleton()->initialize();

    return setup2();
  }


  /* Engine initialization (Part 2)
   *
   * setup2 registers high level servers and singletons, display the boot splash,
   * register higher level types (Scene, Editor, ...)
   */
  Error Main::setup2() {
    // Initialize DisplayServer
    Error err;
    displayServer = DisplayServer::create(windowMode, windowFlags, err);
    if (!displayServer) {
      // logger.error(L"Unable to create DisplayServer.");
      return err;
    }

    return Error::OK;
  }

  /* Engine startup
   *
   * start is the last step and that's where command line tools can run or the main loop
   * can be created eventually and the project settings put into action.
   */
  bool Main::start() {
    mainTimerSync.init(OS::getSingleton()->getTicksUsec());

    MainLoop^ mainLoop;
    if (editor) {
      mainLoop = gcnew SceneTree();
    }

    return true;
  }


  bool Main::interaction() {
    bool exit = true;

    return exit;
  }


  void Main::cleanup() {

  }

}